<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
        <!---Mybatis上下文
             context:生成一组对象的环境
             id:必选,上下文id,用于在生成错误时提示
             defaultModelType:指定生成对象的样式
                1) conditional:类似hierarchical;
                2) flat:所有内容(主键，blob)等全部生成在一个对象中;
                3) hierarchical:主键生成一个XXKey对象(key class),Blob等单独生成一个对象,其他简单属性在一个对象中(record class)
            targetRuntime:
                1) MyBatis3:默认的值，生成基于MyBatis3.x以上版本的内容,包括XXXBySample;
                2) MyBatis3Simple:类似MyBatis3,只是不生成XXXBySample;
            introspectedColumnImpl:类全限定名,用于扩展MBG
        -->
        <context id="MySqlContext" targetRuntime="MyBatis3">
        <!--
        自动识别数据库关键字,默认false,如果设置为true,根据SqlReservedWords中定义的关键字列表;
        一般保留默认值,遇到数据库关键字(Java关键字),使用columnOverride覆盖
        -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!--配置数据库的链接信息-->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://192.168.1.19:3306/crmpro?useSSL=true"
                        userId="root"
                        password="123456"/>
        <!--数据库BigDecimals字段在java中定义
         java类型处理器
         用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；
         注意一点,默认会先尝试使用Integer,Long,Short等来对应DECIMAL和 NUMERIC数据类型
         forceBigDecimals:
              true:使用BigDecimal对应DECIMAL和 NUMERIC数据类型
              false:
                scale>0;length>18:使用BigDecimal;
                scale=0;length[10,18]:使用Long;
                scale=0;length[5,9]:使用Integer;
                scale=0;length<5:使用Short;
        -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!--实体类生成信息
        targetPackage:这里填写包名com.zeny.bean,生成的实体类将会放在这里
        targetProject:使用src/main/java就行了
        -->
        <javaModelGenerator targetPackage="com.zeny.bean" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!--mybatis 的xml文件地址
        targetPackage:resources下的文件夹名
        targetProject:使用src/main/resources就行了
        生成的xml会放在resources下的mapper文件里面
        -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        <!--mybatis的mapper接口
        targetPackage:这个是包路径,就是在 targetProject="src/main/java"下面的包路径
        targetProject:src/main/java
        生成的文件会放在src/main/java下的com.zeny.mapper包中
        -->
        <javaClientGenerator targetPackage="com.zeny.mapper" targetProject="src/main/java" type="XMLMAPPER">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>
        <!--要生成的表结构:
        tableName:数据库的表名称
        domainObjectName:生成的实体类的名称
        生成的beans会放在 com.zeny.bean中
        -->
        <table tableName="user" domainObjectName="User">
            <!--
            true:生成的model类会直接使用column本身的名字,而不会再使用驼峰命名方法,
                 比如BORN_DATE,生成的属性名字就是BORN_DATE,而不会是bornDate
            false:使用驼峰命名方法
            -->
            <property name="useActualColumnNames" value="false"/>
        </table>
    </context>
</generatorConfiguration>